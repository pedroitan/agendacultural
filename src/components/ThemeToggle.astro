---
/**
 * Theme Toggle Component
 * @description Button for toggling between light and dark themes
 * @component
 * @example
 * <ThemeToggle />
 * 
 * Features:
 * - Toggles between light/dark themes
 * - Persists theme preference in localStorage
 * - Accessible with aria-label
 * - Animated SVG icons
 */
---

<button
  id="themeToggle"
  class="fixed z-50 bottom-4 right-4 p-2 bg-gray-200 dark:bg-gray-800 rounded-full hover:bg-gray-300 dark:hover:bg-gray-700 transition-colors hidden"
  aria-label="Toggle theme"
>
  <svg width="24" height="24" class="sun hidden dark:block">
  <!-- 
    Sun icon:
    - hidden: Initially hidden
    - dark:block: Visible in dark mode
    - currentColor: Inherits text color
  -->
    <path
      fill="currentColor"
      d="M12 18a6 6 0 1 1 0-12 6 6 0 0 1 0 12zm0-2a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM11 1h2v3h-2V1zm0 19h2v3h-2v-3zM3.515 4.929l1.414-1.414L7.05 5.636 5.636 7.05 3.515 4.93zM16.95 18.364l1.414-1.414 2.121 2.121-1.414 1.414-2.121-2.121zm2.121-14.85l1.414 1.415-2.121 2.121-1.414-1.414 2.121-2.121zM5.636 16.95l1.414 1.414-2.121 2.121-1.414-1.414 2.121-2.121zM23 11v2h-3v-2h3zM4 11v2H1v-2h3z"
    />
  </svg>
  <svg width="24" height="24" class="moon dark:hidden">
  <!-- 
    Moon icon:
    - dark:hidden: Hidden in dark mode
    - currentColor: Inherits text color
  -->
    <path
      fill="currentColor"
      d="M10 7a7 7 0 0 0 12 4.9v.1c0 5.523-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2h.1A6.979 6.979 0 0 0 10 7zm-6 5a8 8 0 0 0 15.062 3.762A9 9 0 0 1 8.238 4.938 7.999 7.999 0 0 0 4 12z"
    />
  </svg>
</button>

<script>
/**
 * Theme toggle implementation
 * 
 * Key Features:
 * - Toggles 'dark' class on documentElement
 * - Persists theme preference in localStorage
 * - Initializes based on user preference:
 *   * Checks localStorage for saved preference
 *   * Falls back to system preference
 * - Accessibility:
 *   * aria-label for screen readers
 *   * Keyboard focusable
 * 
 * Data Flow:
 * 1. Check for saved theme preference
 * 2. Apply initial theme
 * 3. Handle toggle clicks
 * 4. Update localStorage and DOM
 */

document.addEventListener('DOMContentLoaded', () => {
  // Initialize theme based on user preference
  const savedTheme = localStorage.getItem('theme');
  const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

  // Ensure dark class is applied to html element
  const htmlElement = document.documentElement;
  if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
    htmlElement.classList.add('dark');
    htmlElement.style.colorScheme = 'dark';
  } else {
    htmlElement.classList.remove('dark');
    htmlElement.style.colorScheme = 'light';
  }

  const themeToggle = document.getElementById('themeToggle');
  
  // Show the toggle button after initialization
  if (themeToggle) {
    themeToggle.classList.remove('hidden');
    
    themeToggle.addEventListener('click', () => {
      const isDark = htmlElement.classList.toggle('dark');
      htmlElement.style.colorScheme = isDark ? 'dark' : 'light';
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      
      // Force repaint to ensure theme change is applied
      document.body.style.display = 'none';
      document.body.offsetHeight; // Trigger reflow
      document.body.style.display = '';
    });
  }
});
</script>
